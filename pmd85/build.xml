<?xml version="1.0" encoding="UTF-8"?>

<project name="Tesla PMD 85 Emulator"
	 default="help"
	 basedir="..">

  <!-- defs -->
  <property name="package"
	    value="pmd85"/>
  <property name="author"
	    value="Tomáš Pecina"/>
  <property name="version"
	    value="0.9.1"/>
  <property name="license"
	    value="GNU General Public License Version 3"/>
  <property name="prefix"
	    value="cz/pecina/retro"/>
  <property name="src.dir"
	    value="src"/>
  <property name="test.dir"
	    value="test"/>
  <property name="test.src.dir"
	    value="${test.dir}/src"/>
  <property name="resources.dir"
	    value="res"/>
  <property name="lib.dir"
	    value="lib"/>
  <property name="test.lib.dir"
	    value="${test.dir}/lib"/>
  <property name="test.resources.dir"
	    value="${test.dir}/res"/>
  <property name="bin.dir"
	    value="bin"/>
  <property name="bin.misc.dir"
	    value="bin/misc"/>
  <property name="graphics.dir"
	    value="${bin.dir}/graphics"/>
  <property name="build.dir"
	    value="${package}/build"/>
  <property name="build.lib.dir"
	    value="${build.dir}/lib"/>
  <property name="build.classes.dir"
	    value="${build.dir}/classes"/>
  <property name="build.test.classes.dir"
	    value="${build.dir}/test/classes"/>
  <property name="build.licenses.dir"
	    value="${build.dir}/licenses"/>
  <property name="build.src.dir"
	    value="${package}/build-src"/>
  <property name="build.src.filtered.dir"
	    value="${build.dir}/src" />
  <property name="build.test.src.filtered.dir"
	    value="${build.dir}/test/src" />
  <property name="build.src.doc.dir"
	    value="${build.src.dir}/doc"/>
  <property name="javac.source.version"
	    value="1.8"/>
  <property name="javac.target.version"
	    value="1.8"/>
  <property name="tests"
	    value="Test*"/>
  <property name="args"
	    value=""/>
  <fileset dir="${bin.dir}"
	   includes="common.makegraphics"
	   id="common.makegraphics"/>

  <!-- help -->
  <target name="help"
	  description="Display list of available targets">
    <java classname="org.apache.tools.ant.Main">
      <arg value="-projecthelp" />
      <arg value="-buildfile" />
      <arg value="${ant.file}" />
      <arg value="-verbose" />
    </java>
  </target>
  
  <!-- classpath -->
  <path id="base.path">
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${lib.dir}/jdom2.jar"/>
    <pathelement location="${lib.dir}/commons-cli.jar"/>
  </path>

  <!-- tokens -->
  <filterset id="filterset">
    <filter token="AUTHOR"
	    value="${author}"/>
    <filter token="VERSION"
	    value="${version}"/>
    <filter token="LICENSE"
	    value="${license}"/>
    <filter token="PACKAGE"
	    value="${package}"/>
  </filterset>

  <!-- prepare -->
  <target name="prepare"
	  description="Set up directory structure">
    <echo message="Preparing the directory structure"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.src.doc.dir}"/>
    <mkdir dir="${build.src.filtered.dir}"/>
    <copy todir="${build.src.filtered.dir}">
      <fileset dir="${src.dir}"
	       includes="**"/>
      <filterset refid="filterset"/>
    </copy>
  </target>
  
  <!-- clean -->
  <target name="clean"
	  description="Remove all generated files">
    <echo message="Cleaning up"/>
    <delete dir="${build.dir}"/>
    <delete dir="${build.src.dir}"/>
  </target>

  <!-- properties -->
  <property name="properties.files"
	    value="TextResources.properties,TextResources_cs.properties,TextResources_sk.properties"/>
  <dependset>
    <srcfileset dir="${src.dir}/${prefix}/${package}"
		includes="${properties.files}"/>
    <srcfileset dir="${src.dir}/${prefix}/common"
		includes="${properties.files}"/>
    <srcfileset dir="${src.dir}/${prefix}/gui"
		includes="${properties.files}"/>
    <srcfileset dir="${src.dir}/${prefix}/memory"
		includes="${properties.files}"/>
    <srcfileset dir="${src.dir}/${prefix}/trec"
		includes="${properties.files}"/>
    <srcfileset dir="${src.dir}/${prefix}/debug"
		includes="${properties.files}"/>
    <srcfileset dir="${src.dir}/${prefix}/peripherals"
		includes="${properties.files}"/>
    <srcfileset dir="${src.dir}/${prefix}/dboutput"
		includes="${properties.files}"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}"
		    files="${properties.files}"/>
    <targetfilelist dir="${resources.dir}/${prefix}/common"
		    files="${properties.files}"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui"
		    files="${properties.files}"/>
    <targetfilelist dir="${resources.dir}/${prefix}/memory"
		    files="${properties.files}"/>
    <targetfilelist dir="${resources.dir}/${prefix}/trec"
		    files="${properties.files}"/>
    <targetfilelist dir="${resources.dir}/${prefix}/debug"
		    files="${properties.files}"/>
    <targetfilelist dir="${resources.dir}/${prefix}/peripherals"
		    files="${properties.files}"/>
    <targetfilelist dir="${resources.dir}/${prefix}/dboutput"
		    files="${properties.files}"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/TextResources.properties"
	     property="avail.TextResources"/>
  <target name="properties"
	  description="Create property files"
	  depends="prepare"
	  unless="avail.TextResources">
    <echo message="Creating property files"/>
    <mkdir dir="${resources.dir}/${prefix}/${package}"/>
    <apply executable="native2ascii"
	   dest="${resources.dir}/${prefix}/${package}">
      <fileset dir="${src.dir}/${prefix}/${package}"
	       includes="${properties.files}"/>
      <srcfile/>
      <targetfile/>
      <identitymapper/>
    </apply>
    <mkdir dir="${resources.dir}/${prefix}/common"/>
    <apply executable="native2ascii"
	   dest="${resources.dir}/${prefix}/common">
      <fileset dir="${src.dir}/${prefix}/common"
	       includes="${properties.files}"/>
      <srcfile/>
      <targetfile/>
      <identitymapper/>
    </apply>
    <mkdir dir="${resources.dir}/${prefix}/gui"/>
    <apply executable="native2ascii"
	   dest="${resources.dir}/${prefix}/gui">
      <fileset dir="${src.dir}/${prefix}/gui"
	       includes="${properties.files}"/>
      <srcfile/>
      <targetfile/>
      <identitymapper/>
    </apply>
    <mkdir dir="${resources.dir}/${prefix}/memory"/>
    <apply executable="native2ascii"
	   dest="${resources.dir}/${prefix}/memory">
      <fileset dir="${src.dir}/${prefix}/memory"
	       includes="${properties.files}"/>
      <srcfile/>
      <targetfile/>
      <identitymapper/>
    </apply>
    <mkdir dir="${resources.dir}/${prefix}/trec"/>
    <apply executable="native2ascii"
	   dest="${resources.dir}/${prefix}/trec">
      <fileset dir="${src.dir}/${prefix}/trec"
	       includes="${properties.files}"/>
      <srcfile/>
      <targetfile/>
      <identitymapper/>
    </apply>
    <mkdir dir="${resources.dir}/${prefix}/debug"/>
    <apply executable="native2ascii"
	   dest="${resources.dir}/${prefix}/debug">
      <fileset dir="${src.dir}/${prefix}/debug"
	       includes="${properties.files}"/>
      <srcfile/>
      <targetfile/>
      <identitymapper/>
    </apply>
    <mkdir dir="${resources.dir}/${prefix}/peripherals"/>
    <apply executable="native2ascii"
	   dest="${resources.dir}/${prefix}/peripherals">
      <fileset dir="${src.dir}/${prefix}/peripherals"
	       includes="${properties.files}"/>
      <srcfile/>
      <targetfile/>
      <identitymapper/>
    </apply>
    <mkdir dir="${resources.dir}/${prefix}/dboutput"/>
    <apply executable="native2ascii"
	   dest="${resources.dir}/${prefix}/dboutput">
      <fileset dir="${src.dir}/${prefix}/dboutput"
	       includes="${properties.files}"/>
      <srcfile/>
      <targetfile/>
      <identitymapper/>
    </apply>
  </target>

  <!-- rom -->
  <dependset>
    <srcfileset dir="${bin.misc.dir}/${package}"
		includes="monitor-0.bin"/>
    <srcfileset dir="${bin.misc.dir}/${package}"
		includes="basic-0.bin"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/ROM"
		    files="monitor-3.bin"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/ROM/monitor-0.bin"
	     property="avail.${package}.ROM"/>
  <target name="rom"
	  unless="avail.${package}.ROM">
    <echo message="Copying ROM images"/>
    <copy todir="${resources.dir}/${prefix}/${package}/ROM">
      <fileset dir="${bin.misc.dir}/${package}"
	       includes="*.bin"/>
    </copy>
  </target>

  <!-- licenses -->
  <dependset>
    <srcfileset dir="${bin.misc.dir}/${package}"
		includes="gpl.txt"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/License"
		    files="gpl.txt"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/License/gpl.txt"
	     property="avail.${package}.licenses"/>
  <target name="licenses"
	  unless="avail.${package}.licenses">
    <echo message="Copying licenses"/>
    <copy todir="${resources.dir}/${prefix}/${package}/License">
      <fileset dir="${bin.misc.dir}/${package}"
	       includes="gpl.txt"/>
    </copy>
  </target>

  <!-- gui.LED -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="LED.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="led-*.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/LED"
		    files="small-red-b-1-0.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/LED/small-red-b-1-0.png"
	     property="avail.gui.LED"/>
  <target name="gui.LED"
	  unless="avail.gui.LED">
    <exec executable="${bin.dir}/${prefix}/gui/LED.makegraphics"/>
  </target>

  <!-- gui.SSD -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="SSD.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="ssd-*.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/SSD"
		    files="big-red-1-b.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/SSD/big-red-1-b.png"
	     property="avail.gui.SSD"/>
  <target name="gui.SSD"
	  unless="avail.gui.SSD">
    <exec executable="${bin.dir}/${prefix}/gui/SSD.makegraphics"/>
  </target>

  <!-- gui.SiSD -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="SiSD.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="sisd-*.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/SiSD"
		    files="small-red-1-b.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/SiSD/small-red-1-b.png"
	     property="avail.gui.SiSD"/>
  <target name="gui.SiSD"
	  unless="avail.gui.SiSD">
    <exec executable="${bin.dir}/${prefix}/gui/SiSD.makegraphics"/>
  </target>

  <!-- gui.ESD -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="ESD.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="esd-*.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/ESD"
		    files="big-lime-1-0.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/ESD/big-lime-1-0.png"
	     property="avail.gui.ESD"/>
  <target name="gui.ESD"
	  unless="avail.gui.ESD">
    <exec executable="${bin.dir}/${prefix}/gui/ESD.makegraphics"/>
  </target>

  <!-- gui.SignESD -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="SignESD.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="signesd-*.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/SignESD"
		    files="big-lime-1-0.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/SignESD/big-lime-1-0.png"
	     property="avail.gui.SignESD"/>
  <target name="gui.SignESD"
	  unless="avail.gui.SignESD">
    <exec executable="${bin.dir}/${prefix}/gui/SignESD.makegraphics"/>
  </target>

  <!-- gui.Digit -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="Digit.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="digits.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/Digit"
		    files="basic-white-1.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/Digit/basic-white-1.png"
	     property="avail.gui.Digit"/>
  <target name="gui.Digit"
	  unless="avail.gui.Digit">
    <exec executable="${bin.dir}/${prefix}/gui/Digit.makegraphics"/>
  </target>

  <!-- gui.CounterResetButton -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="CounterResetButton.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="counterreset-*.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/CounterResetButton"
		    files="basic-gray-1-u.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/CounterResetButton/basic-gray-1-u.png"
	     property="avail.gui.CounterResetButton"/>
  <target name="gui.CounterResetButton"
	  unless="avail.gui.CounterResetButton">
    <exec executable="${bin.dir}/${prefix}/gui/CounterResetButton.makegraphics"/>
  </target>

  <!-- gui.UniversalButton -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="UniversalButton.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="buttons-small-*.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/UniversalButton"
		    files="small-black-blank-1-u.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/UniversalButton/small-black-blank-1-u.png"
	     property="avail.gui.UniversalButton"/>
  <target name="gui.UniversalButton"
	  unless="avail.gui.UniversalButton">
    <exec executable="${bin.dir}/${prefix}/gui/UniversalButton.makegraphics"/>
  </target>

  <!-- gui.Knob -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="Knob.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="knob-round-gray.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/Knob"
		    files="round-gray-1-0.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/Knob/round-gray-1-0.png"
	     property="avail.gui.Knob"/>
  <target name="gui.Knob"
	  unless="avail.gui.Knob">
    <exec executable="${bin.dir}/${prefix}/gui/Knob.makegraphics"/>
  </target>

  <!-- gui.Background -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/gui"
		includes="Background.makegraphics"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="plastic-gray.png"/>
    <srcfileset dir="${graphics.dir}/gui"
		includes="plastic-darkgray.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/gui/Background"
		    files="plastic-gray.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/gui/Background/plastic-gray.png"
	     property="avail.gui.Background"/>
  <target name="gui.Background"
	  unless="avail.gui.Background">
    <exec executable="${bin.dir}/${prefix}/gui/Background.makegraphics"/>
  </target>

  <!-- pmd85.Marking -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="Marking.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="marking.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/Marking"
		    files="basic-1-0.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/Marking/basic-1-0.png"
	     property="avail.pmd85.Marking"/>
  <target name="pmd85.Marking"
	  unless="avail.pmd85.Marking">
    <exec executable="${bin.dir}/${prefix}/${package}/Marking.makegraphics"/>
  </target>

  <!-- pmd85.ComputerPanel -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="ComputerPanel.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="mask.png"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="metal.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/ComputerPanel"
		    files="mask-1.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/ComputerPanel/mask-1.png"
	     property="avail.pmd85.ComputerPanel"/>
  <target name="pmd85.ComputerPanel"
	  unless="avail.pmd85.ComputerPanel">
    <exec executable="${bin.dir}/${prefix}/${package}/ComputerPanel.makegraphics"/>
  </target>

  <!-- pmd85.KeyboardPanel -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="KeyboardPanel.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="longmask.png"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="metal.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/KeyboardPanel"
		    files="longmask-1.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/KeyboardPanel/longmask-1.png"
	     property="avail.pmd85.KeyboardPanel"/>
  <target name="pmd85.KeyboardPanel"
	  unless="avail.pmd85.KeyboardPanel">
    <exec executable="${bin.dir}/${prefix}/${package}/KeyboardPanel.makegraphics"/>
  </target>

  <!-- pmd85.KeyboardKey -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="KeyboardKey.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="keys.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/KeyboardKey"
		    files="K0-1-u.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/KeyboardKey/K0-1-u.png"
	     property="avail.pmd85.KeyboardKey"/>
  <target name="pmd85.KeyboardKey"
	  unless="avail.pmd85.KeyboardKey">
    <exec executable="${bin.dir}/${prefix}/${package}/KeyboardKey.makegraphics"/>
  </target>

  <!-- pmd85.IconButton -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="IconButton.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="icons.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/IconButton"
		    files="wheel-1-d.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/IconButton/wheel-1-d.png"
	     property="avail.pmd85.IconButton"/>
  <target name="pmd85.IconButton"
	  unless="avail.pmd85.IconButton">
    <exec executable="${bin.dir}/${prefix}/${package}/IconButton.makegraphics"/>
  </target>

  <!-- pmd85.AboutLogo -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="AboutLogo.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="tesla.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/AboutLogo"
		    files="tesla.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/AboutLogo/tesla.png"
	     property="avail.pmd85.AboutLogo"/>
  <target name="pmd85.AboutLogo"
	  unless="avail.pmd85.AboutLogo">
    <exec executable="${bin.dir}/${prefix}/${package}/AboutLogo.makegraphics"/>
  </target>

  <!-- pmd85.AboutPhoto -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="AboutPhoto.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="pmi.jpg"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/AboutPhoto"
		    files="pmd.jpg"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/AboutPhoto/pmd.jpg"
	     property="avail.pmd85.AboutPhoto"/>
  <target name="pmd85.AboutPhoto"
	  unless="avail.pmd85.AboutPhoto">
    <exec executable="${bin.dir}/${prefix}/${package}/AboutPhoto.makegraphics"/>
  </target>

  <!-- pmd85.AboutLicense -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="AboutLicense.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="gpl.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/AboutLicense"
		    files="gpl.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/AboutLicense/gpl.png"
	     property="avail.pmd85.AboutLicense"/>
  <target name="pmd85.AboutLicense"
	  unless="avail.pmd85.AboutLicense">
    <exec executable="${bin.dir}/${prefix}/${package}/AboutLicense.makegraphics"/>
  </target>

  <!-- pmd85.ApplicationIcons -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/${package}"
		includes="ApplicationIcons.makegraphics"/>
    <srcfileset dir="${graphics.dir}/${package}"
		includes="appicon.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/ApplicationIcons"
		    files="icon-64.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/ApplicationIcons/icon-64.png"
	     property="avail.pmd85.ApplicationIcons"/>
  <target name="pmd85.ApplicationIcons"
	  unless="avail.pmd85.ApplicationIcons">
    <exec executable="${bin.dir}/${prefix}/${package}/ApplicationIcons.makegraphics"/>
  </target>

  <!-- trec.TapeRecorderPanel -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/trec"
		includes="TapeRecorderPanel.makegraphics"/>
    <srcfileset dir="${graphics.dir}/trec"
		includes="mask.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/trec/TapeRecorderPanel"
		    files="mask-1.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/trec/TapeRecorderPanel/mask-1.png"
	     property="avail.trec.TapeRecorderPanel"/>
  <target name="trec.TapeRecorderPanel"
	  unless="avail.trec.TapeRecorderPanel">
    <exec executable="${bin.dir}/${prefix}/trec/TapeRecorderPanel.makegraphics"/>
  </target>

  <!-- trec.TapeRecorderButton -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/trec"
		includes="TapeRecorderButton.makegraphics"/>
    <srcfileset dir="${graphics.dir}/trec"
		includes="buttons.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/trec/TapeRecorderButton"
		    files="record-1-u.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/trec/TapeRecorderButton/record-1-u.png"
	     property="avail.trec.TapeRecorderButton"/>
  <target name="trec.TapeRecorderButton"
	  unless="avail.trec.TapeRecorderButton">
    <exec executable="${bin.dir}/${prefix}/trec/TapeRecorderButton.makegraphics"/>
  </target>

  <!-- trec.VUMeter -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/trec"
		includes="VUMeter.makegraphics"/>
    <srcfileset dir="${graphics.dir}/trec"
		includes="vumeter-*.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/trec/VUMeter"
		    files="vumeter-1-0.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/trec/VUMeter/vumeter-1-0.png"
	     property="avail.trec.VUMeter"/>
  <target name="trec.VUMeter"
	  unless="avail.trec.VUMeter">
    <exec executable="${bin.dir}/${prefix}/trec/VUMeter.makegraphics"/>
  </target>

  <!-- debug.DebuggerPanel -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/debug"
		includes="DebuggerPanel.makegraphics"/>
    <srcfileset dir="${graphics.dir}/debug"
		includes="debugger.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/debug/DebuggerPanel"
		    files="mask-1.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/debug/DebuggerPanel/mask-1.png"
	     property="avail.debug.DebuggerPanel"/>
  <target name="debug.DebuggerPanel"
	  unless="avail.debug.DebuggerPanel">
    <exec executable="${bin.dir}/${prefix}/debug/DebuggerPanel.makegraphics"/>
  </target>

  <!-- debug.DebuggerButton -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/debug"
		includes="DebuggerButton.makegraphics"/>
    <srcfileset dir="${graphics.dir}/debug"
		includes="buttons.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/debug/DebuggerButton"
		    files="stepin-1-u.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/debug/DebuggerButton/stepin-1-u.png"
	     property="avail.debug.DebuggerButton"/>
  <target name="debug.DebuggerButton"
	  unless="avail.debug.DebuggerButton">
    <exec executable="${bin.dir}/${prefix}/debug/DebuggerButton.makegraphics"/>
  </target>

  <!-- counter.CounterPanel -->
  <dependset>
    <srcfileset refid="common.makegraphics"/>
    <srcfileset dir="${bin.dir}/${prefix}/counter"
		includes="CounterPanel.makegraphics"/>
    <srcfileset dir="${graphics.dir}/counter"
		includes="mask.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/counter/CounterPanel"
		    files="mask-1.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/counter/CounterPanel/mask-1.png"
	     property="avail.counter.CounterPanel"/>
  <target name="counter.CounterPanel"
	  unless="avail.counter.CounterPanel">
    <exec executable="${bin.dir}/${prefix}/counter/CounterPanel.makegraphics"/>
  </target>

  <!-- graphics -->
  <target name="graphics"
	  depends="prepare,gui.LED,gui.SSD,gui.SiSD,gui.ESD,gui.SignESD,gui.Digit,gui.CounterResetButton,gui.UniversalButton,gui.Knob,gui.Background,pmd85.Marking,pmd85.ComputerPanel,pmd85.KeyboardPanel,pmd85.KeyboardKey,pmd85.IconButton,pmd85.AboutLogo,pmd85.AboutPhoto,pmd85.AboutLicense,pmd85.ApplicationIcons,trec.TapeRecorderPanel,trec.TapeRecorderButton,trec.VUMeter,debug.DebuggerPanel,debug.DebuggerButton"
	  description="Create bitmaps"
	  unless="nographics"/>

  <!-- compile -->
  <target name="compile"
	  depends="prepare,properties,rom,licenses,graphics"
	  description="Compile source code">
    <javac srcdir="${build.src.filtered.dir}"
	   destdir="${build.classes.dir}"
	   classpathref="base.path"
	   includeAntRuntime="false"
	   debug="true"
	   source="${javac.source.version}"
	   target="${javac.target.version}">
      <compilerarg value="-Xlint:deprecation"/>
      <compilerarg value="-Xlint:unchecked"/>
      <compilerarg value="-Xdiags:verbose"/>
    </javac>
    <copy todir="${build.classes.dir}/${prefix}/${package}">
      <fileset dir="${resources.dir}/${prefix}/${package}"/>
    </copy>
    <copy todir="${build.classes.dir}/${prefix}/gui">
      <fileset dir="${resources.dir}/${prefix}/gui"/>
    </copy>
    <copy todir="${build.classes.dir}/${prefix}/memory">
      <fileset dir="${resources.dir}/${prefix}/memory"/>
    </copy>
    <copy todir="${build.classes.dir}/${prefix}/trec">
      <fileset dir="${resources.dir}/${prefix}/trec"/>
    </copy>
    <copy todir="${build.classes.dir}/${prefix}/debug">
      <fileset dir="${resources.dir}/${prefix}/debug"/>
    </copy>
    <copy todir="${build.classes.dir}/${prefix}/peripherals">
      <fileset dir="${resources.dir}/${prefix}/peripherals"/>
    </copy>
    <copy todir="${build.classes.dir}/${prefix}/dboutput">
      <fileset dir="${resources.dir}/${prefix}/dboutput"/>
    </copy>
    <copy todir="${build.licenses.dir}">
      <fileset dir="${resources.dir}/${prefix}/${package}/License"
	       includes="*gpl.txt"/>
    </copy>
    <copy todir="${build.classes.dir}/${prefix}/memory">
      <fileset dir="${src.dir}/${prefix}/memory"
	       includes="*.xsd"/>
    </copy>
    <copy todir="${build.classes.dir}/${prefix}/trec">
      <fileset dir="${src.dir}/${prefix}/trec"
	       includes="*.xsd"/>
    </copy>
  </target>

  <!-- javadoc -->
  <target name="javadoc"
	  depends="clean,prepare"
	  description="Generate Javadoc">
    <javadoc sourcepath="${build.src.filtered.dir}"
	     destdir="${build.src.doc.dir}"
	     classpathref="base.path"
	     charset="UTF-8"/>
  </target>

  <!-- jar -->
  <target name="jar"
	  depends="clean,compile"
	  description="Generate application JAR">
    <jar jarfile="${build.lib.dir}/${package}.jar"
	 basedir="${build.classes.dir}">
      <zipfileset src="${lib.dir}/jdom2.jar"
		  includes="org/"/>
      <zipfileset src="${lib.dir}/commons-cli.jar"
		  includes="org/"/>
      <manifest>
        <attribute name="Main-Class"
		   value="cz.pecina.retro.pmd85.Emulator"/>
	<attribute name="Implementation-Vendor"
		   value="Tomáš Pecina"/>
	<attribute name="Implementation-Title"
		   value="Tesla PMD 85 Emulator"/>
	<attribute name="Implementation-Version"
		   value="${version}"/>
      </manifest>
    </jar>
  </target>
  
  <!-- run -->
  <target name="run"
	  depends="compile"
	  description="Run application">
    <java classname="cz.pecina.retro.${package}.Emulator"
	  classpathref="base.path"
	  fork="true">
      <arg line="${args}"/>
      <assertions>
	<enable/>
      </assertions>
    </java>
  </target>
  
  <!-- debug -->
  <target name="debug"
	  depends="compile"
	  description="Run application with debug">
    <java classname="cz.pecina.retro.${package}.Emulator"
	  classpathref="base.path"
	  fork="true">
      <jvmarg value="-Djava.util.logging.config.file=${package}/debug.properties"/>
      <arg line="${args}"/>
      <assertions>
	<enable/>
      </assertions>
    </java>
  </target>
  
  
  <!-- test.classpath -->
  <path id="test.base.path">
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${build.test.classes.dir}"/>
    <pathelement location="${lib.dir}/jdom2.jar"/>
    <pathelement location="${lib.dir}/commons-cli.jar"/>
    <pathelement location="${test.lib.dir}/junit.jar"/>
  </path>

  <!-- test.prepare -->
  <target name="test.prepare"
	  description="Set up test directory structure">
    <echo message="Preparing the test directory structure"/>
    <mkdir dir="${build.test.classes.dir}"/>
    <mkdir dir="${build.test.src.filtered.dir}"/>
    <mkdir dir="${test.resources.dir}/${prefix}/${package}"/>
    <copy todir="${build.test.src.filtered.dir}">
      <fileset dir="${test.src.dir}"
	       includes="**"/>
      <filterset refid="filterset"/>
    </copy>
  </target>
  
  <!-- test.compile -->
  <target name="test.compile"
	  depends="compile,test.prepare"
	  description="Compile test source code">
    <javac srcdir="${build.test.src.filtered.dir}"
	   destdir="${build.test.classes.dir}"
	   classpathref="test.base.path"
	   includeAntRuntime="false"
	   debug="true"
	   source="${javac.source.version}"
	   target="${javac.target.version}"/>
    <copy todir="${build.test.classes.dir}/${prefix}/${package}">
      <fileset dir="${test.resources.dir}/${prefix}/${package}"
	       includes="**"/>
    </copy>
  </target>

  <!-- test -->
  <target name="test"
	  depends="compile,test.compile"
	  description="Run tests">
    <junit printsummary="yes"
	   haltonerror="yes"
	   haltonfailure="yes"
	   fork="yes">
      <formatter type="plain"
		 usefile="false"/>
      <classpath refid="test.base.path"/>
      <batchtest>
	<fileset dir="${build.test.classes.dir}">
	  <include name="**/${tests}.class"/>
	  <exclude name="**/Test*All.class"/>
	  <exclude name="**/*$*"/>
	</fileset>
      </batchtest>
      <assertions>
	<enable/>
      </assertions>
    </junit>
  </target>
  
</project>
