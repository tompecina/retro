; board.S
;
; Copyright (C) 2015, Tomáš Pecina <tomas@pecina.cz>
;
; This file is part of cz.pecina.retro, retro 8-bit computer emulators.
;
; This application is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
;
; This application is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.         
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.


; This is the board drawing code.

	.include "reversi.inc"
	
; ==============================================================================
; Constants
	
	.equiv	ULC, 0xce15	; the upper left corner
	
; ==============================================================================
; draw_board - draw board
; 
;   uses:   all
; 
	.global	draw_board
draw_board:
	ld	hl,ULC
	call	2f
	ld	b,7
1:	call	3f
	call	4f
	dec	b
	jp	nz,1b
	call	3f
2:	ld	b,24		; draw solid horizontal line
1:	ld	(hl),0x3f
	inc	hl
	dec	b
	jp	nz,1b
	ld	(hl),0x01
	jp	7f
4:	ld	a,24		; draw dotted horizontal line
1:	ld	(hl),0x15
	inc	hl
	dec	a
	jp	nz,1b
	ld	(hl),0x01
	jp	7f
3:	ld	c,8		; draw one row
1:	call	5f
	call	6f
	dec	c
	jp	nz,1b
5:	ld	(hl),0x01	; draw odd line
	ld	de,24
	add	hl,de
	ld	(hl),0x01
	jp	7f
6:	ld	a,9		; draw even line
1:	ld	(hl),0x01
	inc	hl
	inc	hl
	inc	hl
	dec	a
	jp	nz,1b
	ld	de,37
	jp	1f
7:	ld	de,40		; adjust HL for the next line
1:	add	hl,de
	ret

; ==============================================================================
; draw_labels - draw labels
; 
;   uses:   A, D, E, H, L
; 
	.global	draw_labels
draw_labels:
	ld	hl,ULC - 127
	ld	a,'A'
1:	call	2f
	ld	de,10240
	add	hl,de
	call	2f
	ld	de,-10237
	add	hl,de
	inc	a
	cp	'I'
	jp	nz,1b
	ld	hl, ULC + 894
	ld	a,'1'
1:	call	2f
	ld	de,27
	add	hl,de
	call	2f
	ld	de,1125
	add	hl,de
	inc	a
	cp	'9'
	jp	nz,1b
	ret
2:	push	af
	call	wrchar
	pop	af
	ret
	
; ==============================================================================
; draw_shape - draw shape
; 
;   input:  (HL) - shape
;           C - square
;
;   uses:   all
; 
	.global	draw_shape
draw_shape:
	push	hl
	ld	b,c
	ld	a,b
	and	0x38
	ld	e,a
	ld	d,0
	ld	hl,144
	push	bc
	call	mul16
	pop	bc
	ld	a,c
	and	0x07
	ld	e,a
	add	a,a
	add	a,e
	ld	e,a
	ld	d,0
	add	hl,de
	ld	de,ULC + 64
	add	hl,de
	pop	de
	ld	b,17
1:	ld	a,(de)
	ld	c,a
	ld	a,(hl)
	and	1
	or	c
	ld	(hl),a
	inc	hl
	inc	de
	ld	a,(de)
	ld	(hl),a
	inc	hl
	inc	de
	ld	a,(de)
	ld	(hl),a
	dec	b
	ret	z
	ld	a,b
	ld	bc,62
	add	hl,bc
	ld	b,a
	inc	de
	jp	1b
	
; ==============================================================================
; anim_b2w - animate black-to-white
; 
;   input:  C - square
; 
;   uses:   all
; 
	.global	anim_b2w
anim_b2w:
	ld	hl,BLACK_DISK
	ld	de,51
	jp	1f
	
; ==============================================================================
; anim_w2b - animate white-to-black
; 
;   input:  C - square
; 
;   uses:   all
; 
	.global	anim_w2b
anim_w2b:
	ld	hl,WHITE_DISK
	ld	de,-51
1:	ld	b,9
	; fall through
	
; ==============================================================================
; animate - animate shape transition
; 
;   input:  (HL) - initial shape
;           DE - difference (normally 51 or -51)
;           B - number of shapes
;           C - square
;
;   uses:   all
; 
	.global	animate
animate:
	push	hl
	push	de
	push	bc
	call	draw_shape
	call	anim_pause
	pop	bc
	pop	de
	pop	hl
	dec	b
	ret	z
	add	hl,de
	jp	animate
	
; ==============================================================================
; anim_pause - animation pause
; 
;   uses:   A, H, L
; 
	.global	anim_pause
anim_pause:
	ld	hl,2000
1:	dec	hl
	ld	a,h
	or	l
	jp	nz,1b
	ret
	
; ==============================================================================
; long_anim_pause - longer animation pause
; 
;   uses:   A, H, L
; 
	.global	long_anim_pause
long_anim_pause:
	ld	hl,5000
	jp	1b
	
; ==============================================================================
; draw_pos - draw position
; 
;   input:  (HL) - array of black disks
;           (DE) - array of white disks
; 
;   uses:   all
; 
	.global	draw_pos
draw_pos:
	ld	b,0
4:	ld	a,(hl)
	push	hl
	ld	h,a
	ld	a,(de)
	push	de
	ld	l,a
	ld	c,7
3:	add	hl,hl
	push	hl
	jp	nc,1f
	ld	hl,BLACK_DISK
	jp	2f
1:	ld	a,h
	rra
	ld	hl,WHITE_DISK
	jp	c,2f
	ld	hl,BLANK_SQUARE
2:	push	bc
	call	rc2sq
	call	draw_shape
	pop	bc
	pop	hl
	dec	c
	jp	p,3b
	pop	de
	pop	hl
	inc	hl
	inc	de
	inc	b
	ld	a,b
	cp	8
	jp	nz,4b
	ret
	
; ==============================================================================
; anim_move - animate move
; 
;   input:  (HL) - array of black disks
;           (DE) - array of white disks
;           C - move (must be legal)
;           B - =0 black to move
;               =1 white to move
; 
;   uses:   all
; 
	.global	anim_move
anim_move:
	ld	a,c
	or	a
	ret	m
	push	hl
	push	de
	push	bc
	ld	a,b
	or	a
	jp	z,1f
	ld	hl,WHITE_DISK
	jp	2f
1:	ld	hl,BLACK_DISK
2:	call	draw_shape
	call	long_anim_pause
	pop	bc
	pop	de
	pop	hl
	ld	a,b
	or	a
	jp	z,1f
	ex	de,hl
1:	push	bc
	call	one_legal
	pop	bc
	ld	de,dir_offsets
2:	ld	a,(de)
	or	a
	ret	z
	inc	de
	push	de
	ld	d,a
	ld	e,(hl)
	inc	hl
	push	hl
	push	bc
1:	dec	e
	jp	m,1f
	ld	a,c
	add	a,d
	ld	c,a
	ld	a,b
	or	a
	push	de
	push	bc
	push	af
	call	z,anim_w2b
	pop	af
	call	nz,anim_b2w
	call	long_anim_pause
	pop	bc
	pop	de
	jp	1b
1:	pop	bc
	pop	hl
	pop	de
	jp	2b
	
; ==============================================================================
; Direction offsets
; 
dir_offsets:
	.byte	-9, -8, -7, -1, 1, 7, 8, 9, 0
	
; ==============================================================================
; Shapes
	
; blank square
	.global	BLANK_SQUARE
BLANK_SQUARE:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00

; black disk
	.global	BLACK_DISK
BLACK_DISK:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x1c, 0x00
	.byte	0x00, 0x23, 0x01
	.byte	0x20, 0x00, 0x02
	.byte	0x10, 0x00, 0x04
	.byte	0x08, 0x00, 0x08
	.byte	0x08, 0x00, 0x08
	.byte	0x04, 0x00, 0x10
	.byte	0x04, 0x00, 0x10
	.byte	0x04, 0x00, 0x10
	.byte	0x08, 0x00, 0x08
	.byte	0x08, 0x00, 0x08
	.byte	0x10, 0x00, 0x04
	.byte	0x20, 0x00, 0x02
	.byte	0x00, 0x23, 0x01
	.byte	0x00, 0x1c, 0x00
	.byte	0x00, 0x00, 0x00

; black disk, turned 1
	.global	BLACK_TURNED1
BLACK_TURNED1:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x3e, 0x00
	.byte	0x20, 0x01, 0x03
	.byte	0x10, 0x00, 0x04
	.byte	0x08, 0x00, 0x08
	.byte	0x04, 0x00, 0x10
	.byte	0x04, 0x00, 0x10
	.byte	0x04, 0x00, 0x10
	.byte	0x08, 0x00, 0x08
	.byte	0x10, 0x00, 0x04
	.byte	0x20, 0x01, 0x03
	.byte	0x00, 0x3e, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00

; black disk, turned 2
	.global	BLACK_TURNED2
BLACK_TURNED2:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x3f, 0x01
	.byte	0x30, 0x00, 0x06
	.byte	0x08, 0x00, 0x08
	.byte	0x0c, 0x00, 0x18
	.byte	0x08, 0x00, 0x08
	.byte	0x30, 0x00, 0x06
	.byte	0x00, 0x3f, 0x01
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00

; black disk, turned 3
	.global	BLACK_TURNED3
BLACK_TURNED3:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x3f, 0x01
	.byte	0x38, 0x00, 0x0e
	.byte	0x0c, 0x00, 0x18
	.byte	0x38, 0x00, 0x0e
	.byte	0x00, 0x3f, 0x01
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00

; disk, half turned
	.global	HALF_TURNED
HALF_TURNED:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00

; white disk, turned 3
	.global	WHITE_TURNED3
WHITE_TURNED3:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x3f, 0x01
	.byte	0x38, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x00, 0x3f, 0x01
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00

; white disk, turned 2
	.global	WHITE_TURNED2
WHITE_TURNED2:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x3f, 0x01
	.byte	0x30, 0x3f, 0x07
	.byte	0x38, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x30, 0x3f, 0x07
	.byte	0x00, 0x3f, 0x01
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00

; white disk, turned 1
	.global	WHITE_TURNED1
WHITE_TURNED1:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x3e, 0x00
	.byte	0x20, 0x3f, 0x03
	.byte	0x30, 0x3f, 0x07
	.byte	0x38, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x30, 0x3f, 0x07
	.byte	0x20, 0x3f, 0x03
	.byte	0x00, 0x3e, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00

; white disk
	.global	WHITE_DISK
WHITE_DISK:
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x1c, 0x00
	.byte	0x00, 0x3f, 0x01
	.byte	0x20, 0x3f, 0x03
	.byte	0x30, 0x3f, 0x07
	.byte	0x38, 0x3f, 0x0f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x30, 0x3f, 0x07
	.byte	0x20, 0x3f, 0x03
	.byte	0x00, 0x3f, 0x01
	.byte	0x00, 0x1c, 0x00
	.byte	0x00, 0x00, 0x00

; cursor on blank square
	.global	BLANK_CURSOR
BLANK_CURSOR:
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x15, 0x15
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x15, 0x15
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x15, 0x15
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x15, 0x15
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x15, 0x15
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x15, 0x15
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x15, 0x15
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x15, 0x15
	.byte	0x2a, 0x2a, 0x2a
	
; cursor on black disk
	.global	BLACK_CURSOR
BLACK_CURSOR:
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x3f, 0x15
	.byte	0x2a, 0x23, 0x2b
	.byte	0x34, 0x00, 0x16
	.byte	0x1a, 0x00, 0x2c
	.byte	0x0c, 0x00, 0x18
	.byte	0x0a, 0x00, 0x28
	.byte	0x04, 0x00, 0x10
	.byte	0x06, 0x00, 0x30
	.byte	0x04, 0x00, 0x10
	.byte	0x0a, 0x00, 0x28
	.byte	0x0c, 0x00, 0x18
	.byte	0x1a, 0x00, 0x2c
	.byte	0x34, 0x00, 0x16
	.byte	0x2a, 0x23, 0x2b
	.byte	0x14, 0x3f, 0x15
	.byte	0x2a, 0x2a, 0x2a

; cursor on white disk
	.global	WHITE_CURSOR
WHITE_CURSOR:
	.byte	0x2a, 0x2a, 0x2a
	.byte	0x14, 0x3f, 0x15
	.byte	0x2a, 0x3f, 0x2b
	.byte	0x34, 0x3f, 0x17
	.byte	0x3a, 0x3f, 0x2f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x3a, 0x3f, 0x2f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x3e, 0x3f, 0x3f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x3a, 0x3f, 0x2f
	.byte	0x3c, 0x3f, 0x1f
	.byte	0x3a, 0x3f, 0x2f
	.byte	0x34, 0x3f, 0x17
	.byte	0x2a, 0x3f, 0x2b
	.byte	0x14, 0x3f, 0x15
	.byte	0x2a, 0x2a, 0x2a
	
	.end
 
