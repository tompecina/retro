; board.S
;
; Copyright (C) 2015, Tomáš Pecina <tomas@pecina.cz>
;
; This file is part of cz.pecina.retro, retro 8-bit computer emulators.
;
; This application is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
;
; This application is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.         
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.


; This is the chessboard drawing code.

; ==============================================================================
; Constants
	
ULC	equ	0xce15		; the upper left corner
	
; ==============================================================================
; PMD 85 addresses
	
PRTOUT	equ	0x8500			
CURSOR	equ	0xc03e

; ==============================================================================
; _draw_border - draw border
; 
	.global	_draw_border
_draw_border:
	ld	hl,ULC - 64
	ld	de,ULC + (16 * 8 * 64)
	ld	a,0x3f
	ld	c,3 * 8
1:	ld	(hl),a
	ld	(de),a
	inc	hl
	inc	de
	dec	c
	jp	nz,1b
	ld	de,64
	ld	hl,ULC - 65
	ld	a,0x20
	call	1f
	ld	hl,ULC + (3 * 8) - 64
	ld	a,1
1:	ld	c,(16 * 8) + 2
1:	ld	(hl),a
	add	hl,de
	dec	c
	jp	nz,1b
	ret

; ==============================================================================
; _draw_labels - draw labels
; 
	.global	_draw_labels
_draw_labels:
	ld	hl,ULC - (2 * 64) + 1
	ld	a,'A'
1:	call	2f
	ld	de,((16 * 9) + 1) * 64
	add	hl,de
	call	2f
	ld	de,3 - (((16 * 9) + 1) * 64)
	add	hl,de
	inc	a
	cp	'I'
	jp	nz,1b
	ld	hl, ULC + (14 * 64) - 2
	ld	a,'8'
1:	call	2f
	ld	de,(3 * 8) + 3
	add	hl,de
	call	2f
	ld	de,(16 * 64) - (3 * 8) - 3
	add	hl,de
	dec	a
	cp	'0'
	jp	nz,1b
	ret
2:	ld	(CURSOR),hl
	push	af
	call	PRTOUT
	pop	af
	ret
	
; ==============================================================================
; _draw_piece - draw piece
; 
;   input:  $1 - piece
;                  0 = none
;                  2 = white pawn
;                  3 = white knight
;                  4 = white bishop
;                  5 = white rook
;                  6 = white queen
;                  7 = white king
;                 12 = black pawn
;                   ...
;                 17 = black king
;           $2 - square
;                 21 = A1
;                 22 = B1
;                   ...
;                 31 = A2
;                   ...
;                 98 = H8
;
	.global	_draw_piece
_draw_piece:
	ld	hl,2
	add	hl,sp
	ld	e,(hl)		; square -> E
	inc	hl
	inc	hl
	ld	c,(hl)		; piece -> C
	ld	d,0
	ld	hl,10
	push	bc
	call	_ccdiv
	pop	bc
	dec	l
	dec	l		; rank -> L
	dec	e		; file -> E
	ld	a,l
	xor	e
	and	1
	dec	a
	cpl
	and	0x3f
	ld	b,a		; square color mask -> B
	ld	a,e
	add	a,a
	add	a,e
	ld	e,a
	ld	a,7
	sub	l
	add	a,a
	add	a,a
	ld	d,a
	ld	hl,ULC
	add	hl,de		; address in video RAM -> HL
	ld	a,c
	dec	a
	jp	p,1f
	ld	c,16		; draw empty square
	ld	de,62
2:	ld	(hl),b
	inc	hl
	ld	(hl),b
	inc	hl
	ld	(hl),b
	add	hl,de
	dec	c
	jp	nz,2b
	ret
1:	dec	a		; get shape address
	add	a,a
	cp	20
	jp	c,1f
	sub	20
1:	ld	c,a
	rla
	xor	b
	rra
	jp	nc,1f
	inc	c
1:	ld	a,c
	push	hl
	add	a,a
	add	a,a
	ld	c,a
	add	a,a
	add	a,c
	ld	l,a
	ld	h,0
	add	hl,hl
	add	hl,hl
	ld	de,shapes
	add	hl,de
	ex	de,hl		; shape address -> DE
	pop	hl
	ld	c,16		; draw square & piece
1:	ld	a,(de)
	xor	b
	ld	(hl),a
	inc	hl
	inc	de
	ld	a,(de)
	xor	b
	ld	(hl),a
	inc	hl
	inc	de
	ld	a,(de)
	xor	b
	ld	(hl),a
	inc	de
	push	de
	ld	de,62
	add	hl,de
	pop	de
	dec	c
	jp	nz,1b
	ret
	
; ==============================================================================
; shapes - piece shapes
shapes:	
	
; pawn, same color
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x12, 0x00
	.byte	0x00, 0x12, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x12, 0x00
	.byte	0x00, 0x21, 0x00
	.byte	0x20, 0x00, 0x01
	.byte	0x00, 0x21, 0x00
	.byte	0x00, 0x12, 0x00
	.byte	0x00, 0x21, 0x00
	.byte	0x20, 0x00, 0x01
	.byte	0x10, 0x00, 0x02
	.byte	0x08, 0x00, 0x04
	.byte	0x38, 0x3f, 0x07
	.byte	0x00, 0x00, 0x00
	
; pawn, opposite color
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x00, 0x3f, 0x00
	.byte	0x20, 0x3f, 0x01
	.byte	0x00, 0x3f, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x00, 0x3f, 0x00
	.byte	0x20, 0x3f, 0x01
	.byte	0x30, 0x3f, 0x03
	.byte	0x38, 0x3f, 0x07
	.byte	0x38, 0x3f, 0x07
	.byte	0x00, 0x00, 0x00
	
; knight, same color
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x12, 0x00
	.byte	0x00, 0x21, 0x00
	.byte	0x20, 0x00, 0x01
	.byte	0x10, 0x02, 0x02
	.byte	0x08, 0x00, 0x04
	.byte	0x04, 0x00, 0x08
	.byte	0x28, 0x01, 0x08
	.byte	0x10, 0x02, 0x08
	.byte	0x00, 0x01, 0x08
	.byte	0x20, 0x00, 0x08
	.byte	0x10, 0x00, 0x08
	.byte	0x08, 0x00, 0x08
	.byte	0x38, 0x3f, 0x0f
	.byte	0x00, 0x00, 0x00
	
; knight, opposite color
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x00, 0x3f, 0x00
	.byte	0x20, 0x3f, 0x01
	.byte	0x30, 0x3d, 0x03
	.byte	0x38, 0x3f, 0x07
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x10, 0x3e, 0x0f
	.byte	0x00, 0x3f, 0x0f
	.byte	0x20, 0x3f, 0x0f
	.byte	0x30, 0x3f, 0x0f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x38, 0x3f, 0x0f
	.byte	0x00, 0x00, 0x00

; bishop, same color
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x12, 0x00
	.byte	0x00, 0x21, 0x00
	.byte	0x20, 0x00, 0x01
	.byte	0x10, 0x00, 0x02
	.byte	0x08, 0x0c, 0x04
	.byte	0x08, 0x12, 0x04
	.byte	0x08, 0x0c, 0x04
	.byte	0x10, 0x00, 0x02
	.byte	0x20, 0x00, 0x01
	.byte	0x00, 0x33, 0x00
	.byte	0x00, 0x12, 0x00
	.byte	0x38, 0x3f, 0x07
	.byte	0x0c, 0x00, 0x0c
	.byte	0x00, 0x00, 0x00
	
; bishop, opposite color
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x00, 0x3f, 0x00
	.byte	0x20, 0x3f, 0x01
	.byte	0x30, 0x3f, 0x03
	.byte	0x38, 0x33, 0x07
	.byte	0x38, 0x2d, 0x07
	.byte	0x38, 0x33, 0x07
	.byte	0x30, 0x3f, 0x03
	.byte	0x20, 0x3f, 0x01
	.byte	0x00, 0x3f, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x38, 0x3f, 0x07
	.byte	0x0c, 0x00, 0x0c
	.byte	0x00, 0x00, 0x00
	
; rook, same color
	.byte	0x00, 0x00, 0x00
	.byte	0x38, 0x1e, 0x07
	.byte	0x28, 0x12, 0x05
	.byte	0x28, 0x33, 0x05
	.byte	0x08, 0x00, 0x04
	.byte	0x10, 0x00, 0x02
	.byte	0x20, 0x00, 0x01
	.byte	0x00, 0x21, 0x00
	.byte	0x00, 0x21, 0x00
	.byte	0x00, 0x21, 0x00
	.byte	0x00, 0x21, 0x00
	.byte	0x20, 0x00, 0x01
	.byte	0x38, 0x00, 0x07
	.byte	0x08, 0x00, 0x04
	.byte	0x38, 0x3f, 0x07
	.byte	0x00, 0x00, 0x00
	
; rook, opposite color
	.byte	0x00, 0x00, 0x00
	.byte	0x38, 0x1e, 0x07
	.byte	0x38, 0x1e, 0x07
	.byte	0x38, 0x3f, 0x07
	.byte	0x38, 0x3f, 0x07
	.byte	0x30, 0x3f, 0x03
	.byte	0x20, 0x3f, 0x01
	.byte	0x00, 0x3f, 0x00
	.byte	0x00, 0x3f, 0x00
	.byte	0x00, 0x3f, 0x00
	.byte	0x00, 0x3f, 0x00
	.byte	0x20, 0x3f, 0x01
	.byte	0x38, 0x3f, 0x07
	.byte	0x38, 0x3f, 0x07
	.byte	0x38, 0x3f, 0x07
	.byte	0x00, 0x00, 0x00
	
; queen, same color
	.byte	0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x01
	.byte	0x20, 0x21, 0x01
	.byte	0x24, 0x00, 0x09
	.byte	0x2c, 0x00, 0x0d
	.byte	0x24, 0x0c, 0x09
	.byte	0x24, 0x0c, 0x09
	.byte	0x24, 0x0c, 0x09
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x04, 0x00, 0x08
	.byte	0x04, 0x00, 0x08
	.byte	0x04, 0x00, 0x08
	.byte	0x08, 0x00, 0x04
	.byte	0x10, 0x00, 0x02
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x00, 0x00, 0x00
	
; queen, opposite color
	.byte	0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x01
	.byte	0x20, 0x21, 0x01
	.byte	0x24, 0x00, 0x09
	.byte	0x2c, 0x00, 0x0d
	.byte	0x24, 0x0c, 0x09
	.byte	0x24, 0x0c, 0x09
	.byte	0x24, 0x0c, 0x09
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x38, 0x3f, 0x07
	.byte	0x30, 0x3f, 0x03
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x00, 0x00, 0x00
	
; king, same color
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x38, 0x0c, 0x07
	.byte	0x04, 0x2d, 0x08
	.byte	0x04, 0x3f, 0x08
	.byte	0x04, 0x00, 0x08
	.byte	0x04, 0x00, 0x08
	.byte	0x08, 0x00, 0x04
	.byte	0x30, 0x00, 0x03
	.byte	0x00, 0x21, 0x00
	.byte	0x38, 0x00, 0x07
	.byte	0x04, 0x00, 0x08
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x00, 0x00, 0x00
	
; king, opposite color
	.byte	0x00, 0x00, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x00, 0x1e, 0x00
	.byte	0x00, 0x0c, 0x00
	.byte	0x38, 0x0c, 0x07
	.byte	0x3c, 0x2d, 0x0f
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x38, 0x3f, 0x07
	.byte	0x30, 0x3f, 0x03
	.byte	0x00, 0x3f, 0x00
	.byte	0x38, 0x3f, 0x07
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x3c, 0x3f, 0x0f
	.byte	0x00, 0x00, 0x00

 
	.end
 
