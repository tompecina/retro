#! /bin/bash

src="/home/tompecina/devel/retro/src/cz/pecina/retro/pmi80/graphics"
dst="/home/tompecina/devel/retro/res/cz/pecina/retro/pmi80"

opts='-define png:color-type=6'
filter='-filter Lanczos2Sharp'
filtertrans='-filter point'
trans=0.8

# rm -f $dst/{buttons,masks}/*
# pg="-repage 400x300+0+0"
# for s in 1 2 3 4; do
#     w=$(($s*40))
#     h=$(($s*30))
#     o=0
#     for b in "RE" "I" "EX" "R" "BR" "M" "L" "S" "EQ" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "F"; do
#     	convert $opts -crop 400x300+$o+0 $pg $filter -resize ${w}x$h $src/bar.png $dst/buttons/button-$b-${w}x$h-up.png
#     	convert $opts -crop 400x300+$o+300 $pg $filter -resize ${w}x$h $src/bar.png $dst/buttons/button-$b-${w}x$h-down.png
#     	convert $opts -crop 400x300+$o+600 $pg $filter -resize ${w}x$h $src/bar.png $dst/buttons/button-$b-${w}x$h-locked.png
#     	o=$(($o+400))
#     done
#     w=$(($s*290))
#     h=$(($s*370))
#     convert $opts $src/metal.png -crop $((2600*$s/4))x$((3100*$s/4))+0+0 $dst/masks/tmp1.png
#     convert $opts $dst/masks/tmp1.png $filter -resize 2600x3100 $dst/masks/tmp2.png
#     convert $opts $dst/masks/tmp2.png $src/mask.png -composite $dst/masks/tmp3.png
#     convert $opts $dst/masks/tmp3.png $filter -resize $(($s*260))x$(($s*310)) $dst/masks/tmp4.png
#     convert $opts $src/plastic.png -crop ${w}x$h+0+0 $dst/masks/tmp5.png
#     convert $opts $dst/masks/tmp5.png $dst/masks/tmp4.png -geometry +$(($s*15))+$(($s*15)) -repage ${w}x$h+0+0 -composite $dst/masks/mask-${w}x$h.png
# done
# rm $dst/masks/tmp*.png

# rm -f $dst/icons/*
# pg="-repage 512x512+0+0"
# for s in 1 2 3 4; do
#     w=$(($s*32))
#     h=$(($s*32))
#     o=0
#     for b in "debug" "mem" "wheel" "cassette" "cable" "info" "mouse" "gamepad" "printer" "power" "keyboard" "reset" "diskette" "star" "plus"; do
# 	convert $opts -crop 512x512+$o+0 $pg $filtertrans $src/icons.png -alpha Set -channel A -evaluate Multiply $trans -resize ${w}x$h $dst/icons/icon-$b-${w}x$h-dark.png
# 	convert $opts -crop 512x512+$o+512 $pg $filtertrans $src/icons.png -alpha Set -channel A -evaluate Multiply $trans -resize ${w}x$h $dst/icons/icon-$b-${w}x$h-light.png
# 	o=$(($o+512))
#     done
# done

# rm -f $dst/ssd/*
# for a in 0 1; do
#     for b in 0 1; do
# 	for c in 0 1; do
# 	    for d in 0 1; do
# 		for e in 0 1; do
# 		    for f in 0 1; do
# 			for g in 0 1; do
# 			    cp $src/ssd-background.png $dst/ssd/tmp.png
# 			    for i in a b c d e f g; do
# 				eval t=\$$i
# 				if [ $t == 1 ]; then
# 				    convert $opts $dst/ssd/tmp.png $src/ssd-$i.png -composite $dst/ssd/tmp.png
# 				fi
# 			    done
# 			    n=$(($a+$b*2+$c*4+$d*8+$e*16+$f*32+$g*64))
# 			    for s in 1 2 3 4; do
# 				w=$(($s*24))
# 				h=$(($s*40))
# 				convert $opts $filter -resize ${w}x$h $dst/ssd/tmp.png $dst/ssd/ssd-${w}x$h-$n.png
# 			    done
# 			done
# 		    done
# 		done
# 	    done
# 	done
#     done
# done
# rm $dst/ssd/tmp.png

# rm -f $dst/labels/*
# for s in 1 2 3 4; do
#     w=$(($s*96))
#     h=$(($s*32))
#     convert $opts $filter $src/labels.png -alpha Set -channel A -evaluate Multiply $trans -resize ${w}x$h $dst/labels/main-${w}x$h.png
# done
# for s in 1 2 3 4; do
#     w=$(($s*96))
#     h=$(($s*120))
#     convert $opts $filter $src/tesla.png -resize ${w}x$h $dst/labels/tesla-${w}x$h.png
# done
# for s in 1 2 3 4; do
#     w=$(($s*64))
#     h=$(($s*40))
#     convert $opts $filter $src/license.png -resize ${w}x$h $dst/labels/license-${w}x$h.png
# done

# rm -f $dst/appicons/*
# for s in {1..32}; do
#     w=$(($s*16))
#     h=$(($s*16))
#     convert $opts $filter $src/appicon.png -resize ${w}x$h $dst/appicons/appicon-${w}x$h.png
# done


# rm -f $dst/digits/*
# for i in {0..239}; do
#     pg="-repage 90x120+0+0"
#     convert $opts -crop 90x120+0+$((i*5+20)) $pg $src/digits.png $dst/digits/tmp-$i.png
#     for s in 1 2 3 4; do
# 	w=$(($s*10))
# 	h=$(($s*13))
# 	o=0
#     	convert $opts $filter -resize ${w}x$h $dst/digits/tmp-$i.png $dst/digits/digit-${w}x$h-$i.png
#     done
# done
# rm -f $dst/digits/tmp*.png

# rm -f $dst/{trbuttons,trmasks}/*
# pg="-repage 400x300+0+0"
# for s in 1 2 3 4; do
#     w=$(($s*40))
#     h=$(($s*30))
#     o=0
#     for b in "record" "play" "rewind" "ff" "stop" "pause" "eject"; do
#     	convert $opts -crop 400x300+$o+0 $pg $filter -resize ${w}x$h $src/trbar.png $dst/trbuttons/trbutton-$b-${w}x$h-up.png
#     	convert $opts -crop 400x300+$o+300 $pg $filter -resize ${w}x$h $src/trbar.png $dst/trbuttons/trbutton-$b-${w}x$h-down.png
#     	o=$(($o+400))
#     done
#     w=$(($s*8))
#     h=$(($s*15))
#     convert $opts $filter -resize ${w}x$h $src/reset-u.png $dst/trbuttons/reset-${w}x$h-up.png
#     convert $opts $filter -resize ${w}x$h $src/reset-d.png $dst/trbuttons/reset-${w}x$h-down.png    
#     w=$(($s*310))
#     h=$(($s*80))
#     convert $opts $src/trpanel.png -crop ${w}x$h+0+0 $dst/trmasks/tmp2.png
#     convert $opts $src/trmask.png $filter -resize ${w}x$h $dst/trmasks/tmp3.png
#     convert $opts $dst/trmasks/tmp2.png $dst/trmasks/tmp3.png -composite $dst/trmasks/trmask-${w}x$h.png
# done
# rm $dst/trmasks/tmp*.png

# rm -f $dst/vumeter/*
# for s in 1 2 3 4; do
#     w=$(($s*180))
#     h=$(($s*16))
#     for d in "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "10"; do
# 	convert $opts $filter $src/vumeter-$d.png -resize ${w}x$h $dst/vumeter/vumeter-${w}x$h-$d.png
#     done
# done

# rm -f $dst/led/*
# for s in 1 2 3 4; do
#     for c in "red" "green" "yellow"; do
# 	w=$(($s*8))
# 	h=$(($s*8))
# 	for d in "off" "on"; do
# 	    convert $opts $filter $src/led-$c-$d.png -resize ${w}x$h $dst/led/led-$c-${w}x$h-$d.png
# 	done
#     done
# done

# cp $src/pmi.jpg $dst/misc

# rm -f $dst/sisd/*
# pg="-repage 800x1200+0+0"
# for row in {0..5}; do
#     for col in {0..15}; do
# 	a=$((($row+2)*16+$col))
#      	convert $opts -crop 800x1200+$(($col*800))+$(($row*1200)) $pg $src/sisd.png $dst/sisd/tmp.png
# 	for s in 1 2 3 4; do
# 	    w=$(($s*12))
# 	    h=$(($s*18))
#      	    convert $opts $filter -resize ${w}x$h $dst/sisd/tmp.png $dst/sisd/sisd-${w}x$h-$a.png
# 	done
#     done
# done
# rm $dst/sisd/tmp.png

# rm -f $dst/{dbbuttons,dbmasks}/*
# pg="-repage 600x300+0+0"
# for s in 1 2 3 4; do
#     w=$(($s*36))
#     h=$(($s*18))
#     o=0
#     for b in "stepin" "stepover" "runstop"; do
#     	convert $opts -crop 600x300+$o+0 $pg $filter -resize ${w}x$h $src/dbbar.png $dst/dbbuttons/dbbutton-$b-${w}x$h-up.png
#     	convert $opts -crop 600x300+$o+300 $pg $filter -resize ${w}x$h $src/dbbar.png $dst/dbbuttons/dbbutton-$b-${w}x$h-down.png
#     	convert $opts -crop 600x300+$o+600 $pg $filter -resize ${w}x$h $src/dbbar.png $dst/dbbuttons/dbbutton-$b-${w}x$h-lock.png
#     	o=$(($o+600))
#     done
#     w=$(($s*306))
#     h=$(($s*144))
#     convert $opts $src/trpanel.png -crop ${w}x$h+0+0 $dst/dbmasks/tmp2.png
#     convert $opts $src/debugger.png $filter -resize ${w}x$h $dst/dbmasks/tmp3.png
#     convert $opts $dst/dbmasks/tmp2.png $dst/dbmasks/tmp3.png -composite $dst/dbmasks/dbmask-${w}x$h.png
# done
# rm $dst/dbmasks/tmp*.png
# pg="-repage 200x200+0+0"
# for s in 1 2 3 4; do
#     w=$(($s*6))
#     h=$(($s*6))
#     o=0
#     for b in "blank" "plus" "minus" "up" "down"; do
#     	convert $opts -crop 200x200+$o+0 $pg $filter -resize ${w}x$h $src/dbsmallbar.png $dst/dbbuttons/dbbutton-$b-${w}x$h-up.png
#     	convert $opts -crop 200x200+$o+200 $pg $filter -resize ${w}x$h $src/dbsmallbar.png $dst/dbbuttons/dbbutton-$b-${w}x$h-down.png
#     	o=$(($o+200))
#     done
# done

# rm -f $dst/matrix/*
# for s in 1 2 3 4; do
#     w=$(($s*264))
#     h=$(($s*264))
#     convert $opts -crop ${w}x$h+0+0 $src/trpanel.png $dst/matrix/matrixmask-${w}x$h.png
# done

# cp $src/vtfont.bin $dst/misc

# rm -f $dst/parallel/*
# pg="-repage 200x200+0+0"
# for s in 1 2 3 4; do
#     w=$(($s*20))
#     h=$(($s*20))
#     o=0
#     for b in {0..11}; do
#     	convert $opts -crop 200x200+$o+0 $pg $filter -resize ${w}x$h $src/iobar.png $dst/parallel/element-$b-${w}x$h-up.png
#     	convert $opts -crop 200x200+$o+200 $pg $filter -resize ${w}x$h $src/iobar.png $dst/parallel/element-$b-${w}x$h-down.png
#     	convert $opts -crop 200x200+$o+400 $pg $filter -resize ${w}x$h $src/iobar.png $dst/parallel/element-$b-${w}x$h-lock.png
#     	o=$(($o+200))
#     done
#     w=$(($s*170))
#     h=$(($s*245))
#     convert $opts $src/plastic.png -crop ${w}x$h+0+0 $dst/parallel/tmp2.png
#     convert $opts $src/iopanel.png $filter -resize ${w}x$h $dst/parallel/tmp3.png
#     convert $opts $dst/parallel/tmp2.png $dst/parallel/tmp3.png -composite $dst/parallel/mask-${w}x$h.png
# done
# rm $dst/parallel/tmp*.png

# cp $src/speaker.png $dst/misc

# rm -f $dst/dac/*
# pg="-repage 552x336+0+0"
# for r in {0..20}; do
#     for c in {0..17}; do
#     	convert $opts -crop 552x336$(printf "%+d" $(($c*810+132)))$(printf "%+d" $(($r*669+96))) $pg $src/dac.png $dst/dac/tmp.png
# 	for s in 1 2 3 4; do
# 	    w=$(($s*92))
# 	    h=$(($s*56))
#     	    convert $opts $filter -resize ${w}x$h $dst/dac/tmp.png $dst/dac/dac-${w}x$h-$(($r*18+$c)).png
# 	done
#     done
# done
# for s in 1 2 3 4; do
#     w=$(($s*135))
#     h=$(($s*111))
#     convert $opts $src/dacmask.png $filter -resize ${w}x$h $dst/dac/dacmask-${w}x$h.png
# done
# rm $dst/dac/tmp*.png $dst/dac/dac-*-36[1-9].png $dst/dac/dac-*-37?.png

# rm -f $dst/adc/*
# pg="-repage 140x200+0+0"
# for s in 1 2 3 4; do
#     w=$(($s*14))
#     h=$(($s*20))
#     convert $opts -crop 140x200+0+0 $pg $filter -resize ${w}x$h $src/adcbutton.png $dst/adc/adcbutton-${w}x$h.png
#     w=$(($s*150))
#     h=$(($s*235))
#     convert $opts $src/plastic.png -crop ${w}x$h+0+0 $dst/adc/tmp2.png
#     convert $opts $src/adcmask.png $filter -resize ${w}x$h $dst/adc/tmp3.png
#     convert $opts $dst/adc/tmp2.png $dst/adc/tmp3.png -composite $dst/adc/adcmask-${w}x$h.png
# done
# rm $dst/adc/tmp*.png

# rm -f $dst/stepper/*
# pg="-repage 500x500+0+0"
# for r in {0..7}; do
#     for c in {0..9}; do
#     	convert $opts -crop 500x500+$(($c*500))+$(($r*500)) $pg $src/stepper.png $dst/stepper/tmp.png
# 	for s in 1 2 3 4; do
# 	    w=$(($s*50))
# 	    h=$(($s*50))
#     	    convert $opts $filter -resize ${w}x$h $dst/stepper/tmp.png $dst/stepper/stepper-${w}x$h-$(($r*10+$c)).png
# 	done
#     done
# done
for s in 1 2 3 4; do
    w=$(($s*200))
    h=$(($s*200))
    convert $opts $src/motor.png -crop ${w}x$h+0+0 $dst/stepper/tmp2.png
    convert $opts $src/steppermask.png $filter -resize ${w}x$h $dst/stepper/tmp3.png
    convert $opts $dst/stepper/tmp2.png $dst/stepper/tmp3.png -composite $dst/stepper/steppermask-${w}x$h.png
done
rm $dst/stepper/tmp*.png

# rm -f $dst/servo/*
# pg="-repage 500x500+0+0"
# for r in {0..23}; do
#     for c in {0..14}; do
#     	convert $opts -crop 500x500+$(($c*500))+$(($r*500)) $pg $src/servo.png $dst/servo/tmp.png
# 	for s in 1 2 3 4; do
# 	    w=$(($s*50))
# 	    h=$(($s*50))
#     	    convert $opts $filter -resize ${w}x$h $dst/servo/tmp.png $dst/servo/servo-${w}x$h-$(($r*15+$c)).png
# 	done
#     done
# done
for s in 1 2 3 4; do
    w=$(($s*200))
    h=$(($s*200))
    convert $opts $src/motor.png -crop ${w}x$h+0+0 $dst/servo/tmp2.png
    convert $opts $src/servomask.png $filter -resize ${w}x$h $dst/servo/tmp3.png
    convert $opts $dst/servo/tmp2.png $dst/servo/tmp3.png -composite $dst/servo/servomask-${w}x$h.png
done
rm $dst/servo/tmp*.png

# rm -f $dst/pckbd/*
# function pckey {
#     x=$(($2*150))
#     y=$(($3*150))
#     w=$(($4*150))
#     h=$(($5*150))
#     pg="-repage ${w}x$h+0+0"
#     convert $opts -crop ${w}x$h+$x+$y $pg $src/pckbdbar.png $dst/pckbd/tmp.png
#     for s in 1 2 3 4; do
# 	ww=$(($4*9*$s))
# 	hh=$(($5*9*$s))
#      	convert $opts $filter -resize ${ww}x$hh $dst/pckbd/tmp.png $dst/pckbd/key-$1-${ww}x$hh-up.png
#     done
#     y=$(($y+$h))
#     convert $opts -crop ${w}x$h+$x+$y $pg $src/pckbdbar.png $dst/pckbd/tmp.png
#     for s in 1 2 3 4; do
# 	ww=$(($4*9*$s))
# 	hh=$(($5*9*$s))
#      	convert $opts $filter -resize ${ww}x$hh $dst/pckbd/tmp.png $dst/pckbd/key-$1-${ww}x$hh-down.png
#     done
#     y=$(($y+$h))
#     convert $opts -crop ${w}x$h+$x+$y $pg $src/pckbdbar.png $dst/pckbd/tmp.png
#     for s in 1 2 3 4; do
# 	ww=$(($4*9*$s))
# 	hh=$(($5*9*$s))
#      	convert $opts $filter -resize ${ww}x$hh $dst/pckbd/tmp.png $dst/pckbd/key-$1-${ww}x$hh-locked.png
#     done
# }
# pckey 1 0 0 2 2
# pckey 2 2 0 2 2
# pckey 3 4 0 2 2
# pckey 4 6 0 2 2
# pckey 5 8 0 2 2
# pckey 6 10 0 2 2
# pckey 7 12 0 2 2
# pckey 8 14 0 2 2
# pckey 9 16 0 2 2
# pckey 0 18 0 2 2
# pckey minus 20 0 2 2
# pckey equals 22 0 2 2
# pckey openbracket 24 0 2 2
# pckey semicolon 26 0 2 2
# pckey quote 28 0 2 2
# pckey backquote 30 0 2 2
# pckey backslash 32 0 2 2
# pckey comma 34 0 2 2
# pckey period 36 0 2 2
# pckey slash 38 0 2 2
# pckey numpad1 40 0 2 2
# pckey numpad2 42 0 2 2
# pckey numpad3 44 0 2 2
# pckey numpad4 46 0 2 2
# pckey numpad5 48 0 2 2
# pckey numpad6 50 0 2 2
# pckey numpad7 52 0 2 2
# pckey numpad8 54 0 2 2
# pckey numpad9 56 0 2 2
# pckey q 58 0 2 2
# pckey w 60 0 2 2
# pckey e 62 0 2 2
# pckey r 64 0 2 2
# pckey t 66 0 2 2
# pckey y 68 0 2 2
# pckey u 70 0 2 2
# pckey i 72 0 2 2
# pckey o 74 0 2 2
# pckey p 76 0 2 2
# pckey a 78 0 2 2
# pckey s 80 0 2 2
# pckey d 82 0 2 2
# pckey f 84 0 2 2
# pckey g 86 0 2 2
# pckey h 88 0 2 2
# pckey j 90 0 2 2
# pckey k 92 0 2 2
# pckey l 94 0 2 2
# pckey z 96 0 2 2
# pckey x 98 0 2 2
# pckey c 100 0 2 2
# pckey v 102 0 2 2
# pckey b 104 0 2 2
# pckey n 106 0 2 2
# pckey m 108 0 2 2
# pckey f1 110 0 2 2
# pckey f2 112 0 2 2
# pckey f3 114 0 2 2
# pckey f4 116 0 2 2
# pckey f5 118 0 2 2
# pckey f6 120 0 2 2
# pckey f7 122 0 2 2
# pckey f8 124 0 2 2
# pckey f9 126 0 2 2
# pckey f10 128 0 2 2
# pckey esc 130 0 2 2
# pckey numpadasterisk 132 0 2 2
# pckey numpadminus 134 0 2 2
# pckey closebracket 0 6 3 2
# pckey tab 3 6 3 2
# pckey shift 6 6 3 2
# pckey numpad0 9 6 4 2
# pckey numpadperiod 13 6 4 2
# pckey backspace 17 6 4 2
# pckey ctrl 21 6 4 2
# pckey alt 25 6 4 2
# pckey capslock 29 6 4 2
# pckey numlock 33 6 4 2
# pckey scrlock 37 6 4 2
# pckey space 41 6 20 2
# pckey enter 0 12 2 4
# pckey numpadplus 2 12 2 6
# for s in 1 2 3 4; do
#     w=$(($s*396))
#     h=$(($s*102))
#     convert $opts $src/pckbdmask.png $filter -resize ${w}x$h $dst/pckbd/pckbdmask-${w}x$h.png
# done
# rm $dst/pckbd/tmp*.png

# rm -f $dst/sisdmatrix/*
# for s in 1 2 3 4; do
#     w=$(($s*300))
#     h=$(($s*84))
#     convert $opts $src/trpanel.png -crop ${w}x$h+0+0 $dst/sisdmatrix/tmp2.png
#     convert $opts $src/sisdmatrixmask.png $filter -resize ${w}x$h $dst/sisdmatrix/tmp3.png
#     convert $opts $dst/sisdmatrix/tmp2.png $dst/sisdmatrix/tmp3.png -composite $dst/sisdmatrix/sisdmatrixmask-${w}x$h.png
# done
# rm $dst/sisdmatrix/tmp*.png
